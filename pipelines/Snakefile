import textwrap
from os import makedirs
from os.path import join, exists
from shutil import copytree, rmtree

import numpy as np

from tme import Density
from tme.matching_utils import estimate_ram_usage

configfile : "config.yaml"

rule all:
    input:
        expand(
            join(config["OUTPUT_PATH"], "{tools}", "tomogram_{ncores}_{trials}.txt"),
                tools = ["STOPGAP", "PyTom"],
                ncores = config["NCORES"],
                trials = config["TRIALS"],
        ),
        expand(
            join(config["OUTPUT_PATH"], "{tools}", "fitting_{ncores}_{trials}.txt"),
                tools = ["Powerfit", "Situs"],
                ncores = config["NCORES"],
                trials = config["TRIALS"],
        ),
        expand(
            join(config["OUTPUT_PATH"], "{tools}", "tomogram_{ncores}_{trials}_{order}.txt"),
                tools = ["OursNoPadding"],
                ncores =config["NCORES"],
                trials = config["TRIALS"],
                order=[3]
        ),
        expand(
            join(config["OUTPUT_PATH"], "{tools}", "fitting_{ncores}_{trials}_{orders}.txt"),
                tools = ["Ours"],
                orders = [-1],
                ncores = config["NCORES"],
                trials = config["TRIALS"]
        ),


electron_density = Density.from_file(config["MAP_PATH"])
structure_density = Density.from_structure(
    config["MAP_TEMPLATE"],
    origin = electron_density.origin,
    sampling_rate = electron_density.sampling_rate,
    shape = electron_density.shape
)
FITTING_RAM = {str(int(cores)) : estimate_ram_usage(
    electron_density.shape, structure_density.shape,
    matching_method = "FLC", ncores = cores) for cores in config["NCORES"]}

electron_density = Density.from_file(config["TOMOGRAM_PATH"])
structure_density = Density.from_file(config["TOMOGRAM_TEMPLATE"])
MATCHING_RAM = {str(int(cores)) : estimate_ram_usage(
    np.add(electron_density.shape, structure_density.shape,),
    structure_density.shape, matching_method = "FLC", ncores = cores
    ) for cores in config["NCORES"]
}

def get_ram_fitting(wildcards, attempt):
    value = FITTING_RAM[str(wildcards.ncores)]
    value //= 1e6
    ram_scaling = 0.6 + 0.2 * (attempt - 1)
    value *= ram_scaling
    value = min(value, 350 * 1e3)
    return value

def get_ram_matching(wildcards, attempt):
    value = MATCHING_RAM[str(wildcards.ncores)]
    value //= 1e6
    ram_scaling = 0.6 + 0.2 * (attempt - 1)
    value *= ram_scaling
    value = min(value, 350 * 1e3)
    return value

def format_slurm_mpi(wildcards, attempt):
    return f"signal=B:USR1@300 qos=normal ntasks={wildcards.ncores} " \
            "constraint=rome cpus-per-task=1 nodes=1"

def format_slurm(wildcards, attempt):
    return f"signal=B:USR1@300 constraint=rome qos=normal nodes=1 ntasks=1 "\
           f"cpus-per-task={wildcards.ncores}"

def get_cores(wildcards):
    return int(wildcards.ncores)

def make_jobxml(target : str, template : str, template_mask : str,
    outdir : str, angles : str = "angles_90_2.em") -> str:
    return textwrap.dedent(f"""\
        <JobDescription Destination="{outdir}" ID="0" Members="1">
                <Volume Sampling="[0, 0, 0]" Subregion="[0, 0, 0, 0, 0, 0]" Binning="[0, 0, 0]" Filename="{target}"/>
          <Reference PreWetme="" File="{template}" Weighting="">
          </Reference>
          <Mask Filename="{template_mask}" Binning="1" isSphere="True"/>
          <SingleTiltWedge Smooth="0.0" Angle1="40" CutoffRadius="0.0" Angle2="40">
            <TiltAxisRotation Z1="0.0" Z2="0.0" X="0.0"/>
          </SingleTiltWedge>
          <Angles Type="FromEMFile" File="{angles}"/>
          <Score Type="FLCFScore" Value="-10000000000.0">
            <PeakPrior Smooth="-1.0" Radius="0.0" Filename=""/>
          </Score>
        </JobDescription>
    """)

for ncore in config["NCORES"]:
    pytom_dir = join(config["OUTPUT_PATH"], "PyTom", f"{ncore}")
    makedirs(pytom_dir, exist_ok = True)
    xml = make_jobxml(
        target = config["TOMOGRAM_PATH"],
        template = config["TOMOGRAM_TEMPLATE"],
        template_mask = config["TOMOGRAM_TEMPLATE_MASK"],
        outdir = pytom_dir,
        angles = "angles_19.95_1944.em"
    )
    with open(join(pytom_dir, "TM_job.xml"), "w", encoding = "utf-8") as ofile:
        ofile.write(xml)

for ncore in config["NCORES"]:
    for trial in config["TRIALS"]:
        stopgap_dir = join(config["OUTPUT_PATH"], "STOPGAP", f"{ncore}_{trial}_fitting")
        print(config["STOPGAP_ROOTDIR"], stopgap_dir)
        if not exists(stopgap_dir):
            copytree(config["STOPGAP_ROOTDIR"], stopgap_dir, dirs_exist_ok=True)

rule PyTom:
    input:
        target = config["TOMOGRAM_PATH"],
        template = config["TOMOGRAM_TEMPLATE"],
    output:
        join(config["OUTPUT_PATH"], "PyTom", "tomogram_{ncores}_{trial}.txt")
    container: "pytom_latest.sif"
    resources:
        avg_mem  = get_ram_matching,
        mem_mb   = get_ram_matching,
        walltime = lambda wildcards, attempt: 5760,
        attempt  = lambda wildcards, attempt: attempt,
        slurm = format_slurm_mpi,
    params:
        angular_sampling = config['ANGULAR_SAMPLING'],
        map_resolution = config['MAP_RESOLUTION'],
        map_cutoff = config['MAP_CUTOFF'],
        ncores = "{ncores}",
        trial="{trial}",
        tm_config = join(config["OUTPUT_PATH"], "PyTom", "{ncores}", "TM_job.xml"),
    shell:"""
        outdir=$(dirname {output})
        tempdir=$outdir/{params.ncores}_{params.trial}_fitting/
        mkdir -p $tempdir
        cd $tempdir
        /usr/bin/time -v mpirun \
            -np {params.ncores} \
            localization.py \
            -j {params.tm_config} \
            -x 1 -y 2 -z 2 2> {output}

        echo {resources.avg_mem} >> {output}
        """

rule STOPGAP:
    input:
        target = config["TOMOGRAM_PATH"],
        template = config["TOMOGRAM_TEMPLATE"],
    output:
        join(config["OUTPUT_PATH"], "STOPGAP", "tomogram_{ncores}_{trial}.txt")
    resources:
        avg_mem  = get_ram_matching,
        mem_mb   = get_ram_matching,
        walltime = lambda wildcards, attempt: 5760,
        attempt  = lambda wildcards, attempt: attempt,
        slurm = format_slurm_mpi,
    params:
        angular_sampling = config['ANGULAR_SAMPLING'],
        map_resolution = config['MAP_RESOLUTION'],
        map_cutoff = config['MAP_CUTOFF'],
        ncores = "{ncores}",
        trial="{trial}",
        rootdir = config["STOPGAP_ROOTDIR"],
    shell:"""
        module load STOPGAP/0.7.1-foss-2020b-MCR-R2016b
        export STOPGAPHOME="/home/vmaurer/src/STOPGAP/exec"
        subtomo="$STOPGAPHOME/bin/stopgap_mpi_slurm.sh"

        outdir=$(dirname {output})
        tempdir=$outdir/{params.ncores}_{params.trial}_fitting/
        cd $tempdir
        rootdir={params.rootdir}
        sed -i "s|$rootdir|$tempdir|g" tm_param.star

        echo $tempdir
        echo "starting"

        /usr/bin/time -v mpiexec \
            -np {params.ncores} \
            $subtomo \
            $tempdir \
            tm_param.star \
            {params.ncores} 2> {output}

        echo {resources.avg_mem} >> {output}
        """

rule ourTomoNoPadding:
    input:
        target = config["TOMOGRAM_PATH"],
        template = config["TOMOGRAM_TEMPLATE"],
        template_mask = config["TOMOGRAM_TEMPLATE_MASK"],
    output:
        join(
            config["OUTPUT_PATH"],
            "OursNoPadding",
            "tomogram_{ncores}_{trial}_{order}.txt"
        ),
    container:
       "docker://dquz/template_matching:latest"
    resources:
        avg_mem  = get_ram_matching,
        mem_mb   = get_ram_matching,
        walltime = lambda wildcards, attempt: 5760,
        attempt  = lambda wildcards, attempt: attempt,
        slurm = format_slurm
    params:
        angular_sampling = config['ANGULAR_SAMPLING'],
        map_resolution = config['MAP_RESOLUTION'],
        map_cutoff = config['MAP_CUTOFF'],
        ncores = "{ncores}",
        trial="{trial}",
        order="{order}",
    shell:"""
        outdir=$(dirname {output})
        tempdir=$outdir/{params.ncores}_{params.trial}_{params.order}_tomogram/
        mkdir -p $tempdir
        echo $TMPDIR
        cd $tempdir
        /usr/bin/time -v match_template.py \
            -m {input.target} \
            -i {input.template} \
            --template_mask {input.template_mask} \
            --cutoff_template 0 \
            -s FLCSphericalMask \
            -n {params.ncores} \
            -r 1000000000000000 \
            --no_edge_padding \
            --no_fourier_padding \
            -a {params.angular_sampling} 2> {output}

        echo {resources.avg_mem} >> {output}
        """

# Different map to avoid cropping by Situs
rule Situs:
    input:
        target = config["MAP_PATH_SITUS"],
        template = config["MAP_TEMPLATE"],
    output:
        join(config["OUTPUT_PATH"], "Situs", "fitting_{ncores}_{trial}.txt")
    container:
       "docker://dquz/template_matching:latest"
    resources:
        avg_mem  = get_ram_fitting,
        mem_mb   = get_ram_fitting,
        walltime = lambda wildcards, attempt: 5760,
        attempt  = lambda wildcards, attempt: attempt,
        slurm = format_slurm
    params:
        angular_sampling = config['ANGULAR_SAMPLING_SITUS'],
        map_resolution = config['MAP_RESOLUTION'],
        map_cutoff = config['MAP_CUTOFF'],
        ncores = "{ncores}",
        trial="{trial}",
    shell:"""
        outdir=$(dirname {output})
        tempdir=$outdir/{params.ncores}_{params.trial}_fitting/
        mkdir -p $tempdir
        cd $tempdir

        /usr/bin/time -v colores {input.target} {input.template} \
            -res {params.map_resolution} \
            -deg {params.angular_sampling} \
            -sizef 0 \
            -cutoff -10000 \
            -nopowell \
            -nprocs {params.ncores} 2> {output}

        echo {resources.avg_mem} >> {output}
        """

rule Powerfit:
    input:
        target = config["MAP_PATH"],
        template = config["MAP_TEMPLATE"],
    output:
        join(config["OUTPUT_PATH"], "Powerfit", "fitting_{ncores}_{trial}.txt")
    container:
       "docker://dquz/powerfit:latest"
    resources:
        avg_mem  = get_ram_fitting,
        mem_mb   = get_ram_fitting,
        walltime = lambda wildcards, attempt: 840,
        attempt  = lambda wildcards, attempt: attempt,
        slurm = format_slurm
    params:
        angular_sampling = config['ANGULAR_SAMPLING'],
        map_resolution = config['MAP_RESOLUTION'],
        map_cutoff = config['MAP_CUTOFF'],
        ncores = "{ncores}",
        trial="{trial}",
    shell:"""
        outdir=$(dirname {output})
        tempdir=$outdir/{params.ncores}_{params.trial}_fitting/
        mkdir -p $tempdir
        cd $tempdir

        export MKL_NUM_THREADS=
        export OMP_NUM_THREADS=1
        export OPENBLAS_NUM_THREADS=1

        /usr/bin/time -v powerfit {input.target} \
            {params.map_resolution} \
            {input.template} \
            --no-resampling \
            --no-trimming \
            -a {params.angular_sampling} \
            -p {params.ncores} 2> {output}

        echo {resources.avg_mem} >> {output}
        """

rule our:
    input:
        target = config["MAP_PATH"],
        template = config["MAP_TEMPLATE"],
    output:
        join(config["OUTPUT_PATH"], "Ours", "fitting_{ncores}_{trial}_{order}.txt"),
    container:
       "docker://dquz/template_matching:latest"
    resources:
        avg_mem  = get_ram_fitting,
        mem_mb   = get_ram_fitting,
        walltime = lambda wildcards, attempt: 5760,
        attempt  = lambda wildcards, attempt: attempt,
        slurm = format_slurm
    params:
        angular_sampling = config['ANGULAR_SAMPLING'],
        map_resolution = config['MAP_RESOLUTION'],
        map_cutoff = config['MAP_CUTOFF'],
        ncores = "{ncores}",
        trial="{trial}",
        order="{order}",
    threads : get_cores,
    shell:"""
        outdir=$(dirname {output})
        tempdir=$outdir/{params.ncores}_{params.trial}_fitting/
        mkdir -p $tempdir
        cd $tempdir

        /usr/bin/time -v match_template.py \
            -m {input.target} \
            -i {input.template} \
            --cutoff_template 0 \
            -s CORR \
            -n {params.ncores} \
            --no_edge_padding \
            --no_fourier_padding \
            --interpolation_order {params.order} \
            -r 1000000000000000 \
            -a {params.angular_sampling} 2> {output}

        echo {resources.avg_mem} >> {output}
        """
